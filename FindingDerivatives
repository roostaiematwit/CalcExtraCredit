import java.util.Scanner;


public class findDerivative {

	
	public static void main(String[] args)
	{
		Scanner sc = new Scanner(System.in);
		String inInput;
		
		System.out.println("This program is capable of finding 1000 coordinate pairs for any polynomial, trigonometric, base e or natural log equation and its derivative.");
		System.out.println("Please enter one of the following options: 'poly', 'trig', 'e', or 'ln'");
		inInput = sc.next();
		
		if(!inInput.equals("poly") && !inInput.equals("trig") && !inInput.equals("e") && !inInput.equals("ln"))
		{
			System.out.println("Sorry, but that was not a valid operation. Please rerun this program and enter a valid operation.");
			System.exit(0);
		}
		
		if(inInput.equals("poly"))
		{
			findPolyDeriv();
		}

		if(inInput.equals("trig"))
		{
			findTrigDeriv();
		}
		
		if(inInput.equals("e"))
		{
			findeBaseDeriv();
		}
		
		if(inInput.equals("ln"))
		{
			findLnDeriv();
		}
		
		
		sc.close();
	}
	
	public static void findTrigDeriv()
	{
		Scanner sc = new Scanner(System.in);
		double[] xVals = new double[1000];
		double[] yVals = new double[1000];
		double[] yPVals = new double[1000];
		
		
		System.out.println("Equation will look like: y = k*<trigfunction>(a*x + b) + c");
		double k, a, b, c;
		String input;
		
		System.out.println("Please enter the type of function ('sin', 'cos' or 'tan'): ");
		input = sc.next();
		System.out.println("Please enter a k: ");
		k = sc.nextDouble();
		System.out.println("Please enter an a: ");
		a = sc.nextDouble();
		System.out.println("Please enter a b: ");
		b = sc.nextDouble();
		System.out.println("Please enter a c: ");
		c = sc.nextDouble();
		
		System.out.println("Your equation: y = " +  k + input + "(" + a + "x" + " + " + b + ")" + "+" + c);
	
		
		System.out.println("Please enter a range of x values (enter starting value, hit 'enter' then enter the ending value and hit 'enter')");
		double start = sc.nextDouble();
		double end = sc.nextDouble();
		
		double scale = (Math.max(start, end) - Math.min(start, end)) / 1000.0;
	
		if(input.equals("sin")) {
			for(int i = 0; i < 1000; i++)
			{
				xVals[i] = start + (scale*i);
				yVals[i] = k * Math.sin(a * xVals[i] + b) + c;
				if(i == 0)
				{
					yPVals[i] = 0;
				}
				else {
				yPVals[i] = k * Math.cos(a * xVals[i] + b);
				}
			}
		}
		else if(input.equals("cos")) {
			for(int i = 0; i < 1000; i++)
			{
				xVals[i] = start + (scale*i);
				yVals[i] = k * Math.cos(a * xVals[i] + b) + c;
				if(i == 0)
				{
					yPVals[i] = 0;
				}
				else {
				yPVals[i] = -k * Math.sin(a * xVals[i] + b);
				}
			}
		}
		else if(input.equals("tan")) {
			for(int i = 0; i < 1000; i++)
			{
				xVals[i] = start + (scale*i);
				yVals[i] = k * Math.tan(a * xVals[i] + b) + c;
				if(i == 0)
				{
					yPVals[i] = 0;
				}
				else {
				yPVals[i] = k * 1.0 / Math.pow(Math.cos(a * xVals[i] + b), 2);
				}
			}
		}
		else
		{
			System.out.println("You might have misspelled the type of trig function. Please rerun the program and type a correct function next time");
			System.exit(0);
		}
		
		printArrays(xVals, yVals, yPVals);
		
		
		
		sc.close();
	}
	
	
	
	
	public static void findPolyDeriv()
	{
		System.out.println("Equation will look like: y = k*(x+b)^n + c");
		double k, b, n, c;
		Scanner sc = new Scanner(System.in);
		double[] xVals = new double[1000];
		double[] yVals = new double[1000];
		double[] yPVals = new double[1000];
		
		System.out.println("Please enter a k: ");
		k = sc.nextDouble();
		System.out.println("Please enter a b: ");
		b = sc.nextDouble();
		System.out.println("Please enter an n: ");
		n = sc.nextDouble();
		System.out.println("Please enter a c: ");
		c = sc.nextDouble();
		
		System.out.println("Your equation: y = " +  k + "(x" + " + " + b + ")" + "^" + n + " + " + c);
		
		
		System.out.println("Please enter a range of x values (enter starting value, hit 'enter' then enter the ending value and hit 'enter')");
		double start = sc.nextDouble();
		double end = sc.nextDouble();
		
		double scale = (Math.max(start, end) - Math.min(start, end)) / 1000.0;
		for(int i = 0; i < 1000; i++)
		{
			xVals[i] = start + (scale*i);
			yVals[i] = k * Math.pow(xVals[i] + b, n) + c;
			if(i == 0)
			{
				yPVals[i] = 0;
			}
			else if(b != 0){
			yPVals[i] = (k*n) * Math.pow(xVals[i] + b, n-1) * xVals[i];
			}
			else {
				yPVals[i] = (k*n) * Math.pow(xVals[i], n-1);
			}
		}
		
		printArrays(xVals, yVals, yPVals);
		
		sc.close();
	}
	
	public static void printArrays(double[] xVals, double[] yVals, double[] yPVals)
	{
		System.out.println("x-values: ");
		for(int i = 0; i < xVals.length; i++)
		{
			System.out.println(xVals[i]);
		}
		
		System.out.println("y-values: ");
		for(int i = 0; i < xVals.length; i++)
		{
			System.out.println(yVals[i]);
		}
		System.out.println("y'-values (1st value is zero b/c it is impossible to find the slope of a point on the end of a line segment): ");
		for(int i = 0; i < xVals.length; i++)
		{
			System.out.println(yPVals[i]);
		}
		
	}
	
	
	public static void findeBaseDeriv()
	{
		System.out.println("Equation will look like: k*e^(n*x) + c");
		double k, n, c;
		Scanner sc = new Scanner(System.in);
		double[] xVals = new double[1000];
		double[] yVals = new double[1000];
		double[] yPVals = new double[1000];
		
		System.out.println("Please enter a k: ");
		k = sc.nextDouble();
		System.out.println("Please enter an n: ");
		n = sc.nextDouble();
		System.out.println("Please enter a c: ");
		c = sc.nextDouble();
		
		System.out.println("Your equation: y = " +  k + "e" + "^" + n + " + " + c);
		
		
		System.out.println("Please enter a range of x values (enter starting value, hit 'enter' then enter the ending value and hit 'enter')");
		double start = sc.nextDouble();
		double end = sc.nextDouble();
		
		double scale = (Math.max(start, end) - Math.min(start, end)) / 1000.0;
		for(int i = 0; i < 1000; i++)
		{
			xVals[i] = start + (scale*i);
			yVals[i] = k * Math.exp(n*xVals[i]) + c;
			if(i == 0)
			{
				yPVals[i] = 0;
			}
			else {
				yPVals[i] = (k * (n*xVals[i])) * Math.exp(n*xVals[i]);
			}
		}
		
		printArrays(xVals, yVals, yPVals);
		
		sc.close();

	}
	
	public static void findLnDeriv()
	{
		Scanner sc = new Scanner(System.in);
		double[] xVals = new double[1000];
		double[] yVals = new double[1000];
		double[] yPVals = new double[1000];
		
		
		System.out.println("Equation will look like: y = k*ln(a*x + b) + c");
		double k, a, b, c;

		System.out.println("Please enter a k: ");
		k = sc.nextDouble();
		System.out.println("Please enter an a: ");
		a = sc.nextDouble();
		System.out.println("Please enter a b: ");
		b = sc.nextDouble();
		System.out.println("Please enter a c: ");
		c = sc.nextDouble();
		
		System.out.println("Your equation: y = " +  k + "ln" + "(" + a + "x" + " + " + b + ")" + "+" + c);
	
		
		System.out.println("Please enter a range of x values (enter starting value, hit 'enter' then enter the ending value and hit 'enter')");
		double start = sc.nextDouble();
		double end = sc.nextDouble();
		
		double scale = (Math.max(start, end) - Math.min(start, end)) / 1000.0;
	
			for(int i = 0; i < 1000; i++)
			{
				xVals[i] = start + (scale*i);
				yVals[i] = k * Math.log(a * xVals[i] + b) + c;
				if(i == 0)
				{
					yPVals[i] = 0;
				}
				else {
					if(b != 0)
					{
						yPVals[i] = k * (1.0 / (a * xVals[i] + b) * a);
					}
					else {
						yPVals[i] = k * (1.0 / (a * xVals[i] + b));
					}
				
				}
			}

		
		printArrays(xVals, yVals, yPVals);
		
		
		sc.close();
	}
	
	
}
